services:
  web:
    build: .
    container_name: fastapi_app
    restart: always
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs  # Mount logs directory
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d/  # Mount initialization scripts
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  locust:
    image: locustio/locust
    container_name: locust
    depends_on:
      - web
    environment:
      TARGET_HOST: http://localhost:8000  # URL de tu API
    ports:
      - "8089:8089"  # Puerto para la interfaz web de Locust
    volumes:
      - .:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host http://web:8000  # Nota el uso de 'web' para acceder al servicio dentro de Docker

volumes:
  db_data:
